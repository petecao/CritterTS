/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* program := rules=rule+ $
* rule := _ cond=condition _ '-->' _ com=command ';' _ '\n'* _
* command := up_or_act=update_or_action | {updates=update* up_or_act=update_or_action}
* update_or_action := update | action
* update := {{'mem' _ '\[' _ index=expr _ '\]'} | memsugar=memsugar} _ ':=' _ arg=expr _
* action := type={'wait' | 'forward' | 'backward' | 'left' | 'right' | 'eat' | 'attack' | 'grow' | 'bud' | 'mate' | 'serve' _ '\[' ind=expr '\]'}
* condition := conj=conjunction _ {' or ' _ rest=conjunction _}*
* conjunction := rel=relation _ {' and ' _  rest=relation _}*
* relation := {left=expr _ rel_op=rel _ right=expr} | {'\{' _ cond=condition _ '\}'}
* rel := operation={'<' | '<=' | '=' | '\!=' | '>=' | '>'}
* expr := first=term _ {' ' op=addop ' ' _ rest=term _}*
* term := first=factor _ {' ' op=mulop ' ' _ rest=factor _}*
* factor := num='[0-9]+' | {type='mem' _ '\[' _ index=expr _ '\]'} | {'\(' _ expr=expr _ '\)'} | {'-' _ neg_expr=expr} | sensor=sensor | memsugar=memsugar
* memsugar :=  mem_type={'MEMSIZE' | 'DEFENSE' | 'OFFENSE' | 'SIZE' | 'ENERGY' | 'PASS' | 'POSTURE'}
* sensor := near='nearby ' _ expr=expr | ahead='ahead ' _ expr=expr | random='random ' _ expr=expr | smell='smell'
* addop := '\+' | '-'
* mulop := '\*' | '/' | 'mod'
* _ := {'//' !'\n'* '\n'} | {'[ \t\r\n]'*} 
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    program = "program",
    rule = "rule",
    command_1 = "command_1",
    command_2 = "command_2",
    command_$0 = "command_$0",
    update_or_action_1 = "update_or_action_1",
    update_or_action_2 = "update_or_action_2",
    update = "update",
    update_$0_1 = "update_$0_1",
    update_$0_2 = "update_$0_2",
    update_$0_$0 = "update_$0_$0",
    action = "action",
    action_$0_1 = "action_$0_1",
    action_$0_2 = "action_$0_2",
    action_$0_3 = "action_$0_3",
    action_$0_4 = "action_$0_4",
    action_$0_5 = "action_$0_5",
    action_$0_6 = "action_$0_6",
    action_$0_7 = "action_$0_7",
    action_$0_8 = "action_$0_8",
    action_$0_9 = "action_$0_9",
    action_$0_10 = "action_$0_10",
    action_$0_11 = "action_$0_11",
    condition = "condition",
    condition_$0 = "condition_$0",
    conjunction = "conjunction",
    conjunction_$0 = "conjunction_$0",
    relation_1 = "relation_1",
    relation_2 = "relation_2",
    relation_$0 = "relation_$0",
    relation_$1 = "relation_$1",
    rel = "rel",
    rel_$0_1 = "rel_$0_1",
    rel_$0_2 = "rel_$0_2",
    rel_$0_3 = "rel_$0_3",
    rel_$0_4 = "rel_$0_4",
    rel_$0_5 = "rel_$0_5",
    rel_$0_6 = "rel_$0_6",
    expr = "expr",
    expr_$0 = "expr_$0",
    term = "term",
    term_$0 = "term_$0",
    factor_1 = "factor_1",
    factor_2 = "factor_2",
    factor_3 = "factor_3",
    factor_4 = "factor_4",
    factor_5 = "factor_5",
    factor_6 = "factor_6",
    factor_$0 = "factor_$0",
    factor_$1 = "factor_$1",
    factor_$2 = "factor_$2",
    memsugar = "memsugar",
    memsugar_$0_1 = "memsugar_$0_1",
    memsugar_$0_2 = "memsugar_$0_2",
    memsugar_$0_3 = "memsugar_$0_3",
    memsugar_$0_4 = "memsugar_$0_4",
    memsugar_$0_5 = "memsugar_$0_5",
    memsugar_$0_6 = "memsugar_$0_6",
    memsugar_$0_7 = "memsugar_$0_7",
    sensor_1 = "sensor_1",
    sensor_2 = "sensor_2",
    sensor_3 = "sensor_3",
    sensor_4 = "sensor_4",
    addop_1 = "addop_1",
    addop_2 = "addop_2",
    mulop_1 = "mulop_1",
    mulop_2 = "mulop_2",
    mulop_3 = "mulop_3",
    __1 = "__1",
    __2 = "__2",
    __$0 = "__$0",
    __$1 = "__$1",
    $EOF = "$EOF",
}
export interface program {
    kind: ASTKinds.program;
    rules: rule[];
}
export interface rule {
    kind: ASTKinds.rule;
    cond: condition;
    com: command;
}
export type command = command_1 | command_2;
export interface command_1 {
    kind: ASTKinds.command_1;
    up_or_act: update_or_action;
}
export type command_2 = command_$0;
export interface command_$0 {
    kind: ASTKinds.command_$0;
    updates: update[];
    up_or_act: update_or_action;
}
export type update_or_action = update_or_action_1 | update_or_action_2;
export type update_or_action_1 = update;
export type update_or_action_2 = action;
export interface update {
    kind: ASTKinds.update;
    arg: expr;
}
export type update_$0 = update_$0_1 | update_$0_2;
export type update_$0_1 = update_$0_$0;
export interface update_$0_2 {
    kind: ASTKinds.update_$0_2;
    memsugar: memsugar;
}
export interface update_$0_$0 {
    kind: ASTKinds.update_$0_$0;
    index: expr;
}
export interface action {
    kind: ASTKinds.action;
    type: action_$0;
}
export type action_$0 = action_$0_1 | action_$0_2 | action_$0_3 | action_$0_4 | action_$0_5 | action_$0_6 | action_$0_7 | action_$0_8 | action_$0_9 | action_$0_10 | action_$0_11;
export type action_$0_1 = string;
export type action_$0_2 = string;
export type action_$0_3 = string;
export type action_$0_4 = string;
export type action_$0_5 = string;
export type action_$0_6 = string;
export type action_$0_7 = string;
export type action_$0_8 = string;
export type action_$0_9 = string;
export type action_$0_10 = string;
export interface action_$0_11 {
    kind: ASTKinds.action_$0_11;
    ind: expr;
}
export interface condition {
    kind: ASTKinds.condition;
    conj: conjunction;
}
export interface condition_$0 {
    kind: ASTKinds.condition_$0;
    rest: conjunction;
}
export interface conjunction {
    kind: ASTKinds.conjunction;
    rel: relation;
}
export interface conjunction_$0 {
    kind: ASTKinds.conjunction_$0;
    rest: relation;
}
export type relation = relation_1 | relation_2;
export type relation_1 = relation_$0;
export type relation_2 = relation_$1;
export interface relation_$0 {
    kind: ASTKinds.relation_$0;
    left: expr;
    rel_op: rel;
    right: expr;
}
export interface relation_$1 {
    kind: ASTKinds.relation_$1;
    cond: condition;
}
export interface rel {
    kind: ASTKinds.rel;
    operation: rel_$0;
}
export type rel_$0 = rel_$0_1 | rel_$0_2 | rel_$0_3 | rel_$0_4 | rel_$0_5 | rel_$0_6;
export type rel_$0_1 = string;
export type rel_$0_2 = string;
export type rel_$0_3 = string;
export type rel_$0_4 = string;
export type rel_$0_5 = string;
export type rel_$0_6 = string;
export interface expr {
    kind: ASTKinds.expr;
    first: term;
}
export interface expr_$0 {
    kind: ASTKinds.expr_$0;
    op: addop;
    rest: term;
}
export interface term {
    kind: ASTKinds.term;
    first: factor;
}
export interface term_$0 {
    kind: ASTKinds.term_$0;
    op: mulop;
    rest: factor;
}
export type factor = factor_1 | factor_2 | factor_3 | factor_4 | factor_5 | factor_6;
export interface factor_1 {
    kind: ASTKinds.factor_1;
    num: string;
}
export type factor_2 = factor_$0;
export type factor_3 = factor_$1;
export type factor_4 = factor_$2;
export interface factor_5 {
    kind: ASTKinds.factor_5;
    sensor: sensor;
}
export interface factor_6 {
    kind: ASTKinds.factor_6;
    memsugar: memsugar;
}
export interface factor_$0 {
    kind: ASTKinds.factor_$0;
    type: string;
    index: expr;
}
export interface factor_$1 {
    kind: ASTKinds.factor_$1;
    expr: expr;
}
export interface factor_$2 {
    kind: ASTKinds.factor_$2;
    neg_expr: expr;
}
export interface memsugar {
    kind: ASTKinds.memsugar;
    mem_type: memsugar_$0;
}
export type memsugar_$0 = memsugar_$0_1 | memsugar_$0_2 | memsugar_$0_3 | memsugar_$0_4 | memsugar_$0_5 | memsugar_$0_6 | memsugar_$0_7;
export type memsugar_$0_1 = string;
export type memsugar_$0_2 = string;
export type memsugar_$0_3 = string;
export type memsugar_$0_4 = string;
export type memsugar_$0_5 = string;
export type memsugar_$0_6 = string;
export type memsugar_$0_7 = string;
export type sensor = sensor_1 | sensor_2 | sensor_3 | sensor_4;
export interface sensor_1 {
    kind: ASTKinds.sensor_1;
    near: string;
    expr: expr;
}
export interface sensor_2 {
    kind: ASTKinds.sensor_2;
    ahead: string;
    expr: expr;
}
export interface sensor_3 {
    kind: ASTKinds.sensor_3;
    random: string;
    expr: expr;
}
export interface sensor_4 {
    kind: ASTKinds.sensor_4;
    smell: string;
}
export type addop = addop_1 | addop_2;
export type addop_1 = string;
export type addop_2 = string;
export type mulop = mulop_1 | mulop_2 | mulop_3;
export type mulop_1 = string;
export type mulop_2 = string;
export type mulop_3 = string;
export type _ = __1 | __2;
export type __1 = __$0;
export type __2 = __$1;
export interface __$0 {
    kind: ASTKinds.__$0;
}
export type __$1 = string[];
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchprogram($$dpth: number, $$cr?: ErrorTracker): Nullable<program> {
        return this.run<program>($$dpth,
            () => {
                let $scope$rules: Nullable<rule[]>;
                let $$res: Nullable<program> = null;
                if (true
                    && ($scope$rules = this.loop<rule>(() => this.matchrule($$dpth + 1, $$cr), false)) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.program, rules: $scope$rules};
                }
                return $$res;
            });
    }
    public matchrule($$dpth: number, $$cr?: ErrorTracker): Nullable<rule> {
        return this.run<rule>($$dpth,
            () => {
                let $scope$cond: Nullable<condition>;
                let $scope$com: Nullable<command>;
                let $$res: Nullable<rule> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$cond = this.matchcondition($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:-->)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$com = this.matchcommand($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.loop<string>(() => this.regexAccept(String.raw`(?:\n)`, $$dpth + 1, $$cr), true) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.rule, cond: $scope$cond, com: $scope$com};
                }
                return $$res;
            });
    }
    public matchcommand($$dpth: number, $$cr?: ErrorTracker): Nullable<command> {
        return this.choice<command>([
            () => this.matchcommand_1($$dpth + 1, $$cr),
            () => this.matchcommand_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcommand_1($$dpth: number, $$cr?: ErrorTracker): Nullable<command_1> {
        return this.run<command_1>($$dpth,
            () => {
                let $scope$up_or_act: Nullable<update_or_action>;
                let $$res: Nullable<command_1> = null;
                if (true
                    && ($scope$up_or_act = this.matchupdate_or_action($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.command_1, up_or_act: $scope$up_or_act};
                }
                return $$res;
            });
    }
    public matchcommand_2($$dpth: number, $$cr?: ErrorTracker): Nullable<command_2> {
        return this.matchcommand_$0($$dpth + 1, $$cr);
    }
    public matchcommand_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<command_$0> {
        return this.run<command_$0>($$dpth,
            () => {
                let $scope$updates: Nullable<update[]>;
                let $scope$up_or_act: Nullable<update_or_action>;
                let $$res: Nullable<command_$0> = null;
                if (true
                    && ($scope$updates = this.loop<update>(() => this.matchupdate($$dpth + 1, $$cr), true)) !== null
                    && ($scope$up_or_act = this.matchupdate_or_action($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.command_$0, updates: $scope$updates, up_or_act: $scope$up_or_act};
                }
                return $$res;
            });
    }
    public matchupdate_or_action($$dpth: number, $$cr?: ErrorTracker): Nullable<update_or_action> {
        return this.choice<update_or_action>([
            () => this.matchupdate_or_action_1($$dpth + 1, $$cr),
            () => this.matchupdate_or_action_2($$dpth + 1, $$cr),
        ]);
    }
    public matchupdate_or_action_1($$dpth: number, $$cr?: ErrorTracker): Nullable<update_or_action_1> {
        return this.matchupdate($$dpth + 1, $$cr);
    }
    public matchupdate_or_action_2($$dpth: number, $$cr?: ErrorTracker): Nullable<update_or_action_2> {
        return this.matchaction($$dpth + 1, $$cr);
    }
    public matchupdate($$dpth: number, $$cr?: ErrorTracker): Nullable<update> {
        return this.run<update>($$dpth,
            () => {
                let $scope$arg: Nullable<expr>;
                let $$res: Nullable<update> = null;
                if (true
                    && this.matchupdate_$0($$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::=)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$arg = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.update, arg: $scope$arg};
                }
                return $$res;
            });
    }
    public matchupdate_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<update_$0> {
        return this.choice<update_$0>([
            () => this.matchupdate_$0_1($$dpth + 1, $$cr),
            () => this.matchupdate_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchupdate_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<update_$0_1> {
        return this.matchupdate_$0_$0($$dpth + 1, $$cr);
    }
    public matchupdate_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<update_$0_2> {
        return this.run<update_$0_2>($$dpth,
            () => {
                let $scope$memsugar: Nullable<memsugar>;
                let $$res: Nullable<update_$0_2> = null;
                if (true
                    && ($scope$memsugar = this.matchmemsugar($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.update_$0_2, memsugar: $scope$memsugar};
                }
                return $$res;
            });
    }
    public matchupdate_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<update_$0_$0> {
        return this.run<update_$0_$0>($$dpth,
            () => {
                let $scope$index: Nullable<expr>;
                let $$res: Nullable<update_$0_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:mem)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$index = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.update_$0_$0, index: $scope$index};
                }
                return $$res;
            });
    }
    public matchaction($$dpth: number, $$cr?: ErrorTracker): Nullable<action> {
        return this.run<action>($$dpth,
            () => {
                let $scope$type: Nullable<action_$0>;
                let $$res: Nullable<action> = null;
                if (true
                    && ($scope$type = this.matchaction_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.action, type: $scope$type};
                }
                return $$res;
            });
    }
    public matchaction_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<action_$0> {
        return this.choice<action_$0>([
            () => this.matchaction_$0_1($$dpth + 1, $$cr),
            () => this.matchaction_$0_2($$dpth + 1, $$cr),
            () => this.matchaction_$0_3($$dpth + 1, $$cr),
            () => this.matchaction_$0_4($$dpth + 1, $$cr),
            () => this.matchaction_$0_5($$dpth + 1, $$cr),
            () => this.matchaction_$0_6($$dpth + 1, $$cr),
            () => this.matchaction_$0_7($$dpth + 1, $$cr),
            () => this.matchaction_$0_8($$dpth + 1, $$cr),
            () => this.matchaction_$0_9($$dpth + 1, $$cr),
            () => this.matchaction_$0_10($$dpth + 1, $$cr),
            () => this.matchaction_$0_11($$dpth + 1, $$cr),
        ]);
    }
    public matchaction_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<action_$0_1> {
        return this.regexAccept(String.raw`(?:wait)`, $$dpth + 1, $$cr);
    }
    public matchaction_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<action_$0_2> {
        return this.regexAccept(String.raw`(?:forward)`, $$dpth + 1, $$cr);
    }
    public matchaction_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<action_$0_3> {
        return this.regexAccept(String.raw`(?:backward)`, $$dpth + 1, $$cr);
    }
    public matchaction_$0_4($$dpth: number, $$cr?: ErrorTracker): Nullable<action_$0_4> {
        return this.regexAccept(String.raw`(?:left)`, $$dpth + 1, $$cr);
    }
    public matchaction_$0_5($$dpth: number, $$cr?: ErrorTracker): Nullable<action_$0_5> {
        return this.regexAccept(String.raw`(?:right)`, $$dpth + 1, $$cr);
    }
    public matchaction_$0_6($$dpth: number, $$cr?: ErrorTracker): Nullable<action_$0_6> {
        return this.regexAccept(String.raw`(?:eat)`, $$dpth + 1, $$cr);
    }
    public matchaction_$0_7($$dpth: number, $$cr?: ErrorTracker): Nullable<action_$0_7> {
        return this.regexAccept(String.raw`(?:attack)`, $$dpth + 1, $$cr);
    }
    public matchaction_$0_8($$dpth: number, $$cr?: ErrorTracker): Nullable<action_$0_8> {
        return this.regexAccept(String.raw`(?:grow)`, $$dpth + 1, $$cr);
    }
    public matchaction_$0_9($$dpth: number, $$cr?: ErrorTracker): Nullable<action_$0_9> {
        return this.regexAccept(String.raw`(?:bud)`, $$dpth + 1, $$cr);
    }
    public matchaction_$0_10($$dpth: number, $$cr?: ErrorTracker): Nullable<action_$0_10> {
        return this.regexAccept(String.raw`(?:mate)`, $$dpth + 1, $$cr);
    }
    public matchaction_$0_11($$dpth: number, $$cr?: ErrorTracker): Nullable<action_$0_11> {
        return this.run<action_$0_11>($$dpth,
            () => {
                let $scope$ind: Nullable<expr>;
                let $$res: Nullable<action_$0_11> = null;
                if (true
                    && this.regexAccept(String.raw`(?:serve)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr) !== null
                    && ($scope$ind = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.action_$0_11, ind: $scope$ind};
                }
                return $$res;
            });
    }
    public matchcondition($$dpth: number, $$cr?: ErrorTracker): Nullable<condition> {
        return this.run<condition>($$dpth,
            () => {
                let $scope$conj: Nullable<conjunction>;
                let $$res: Nullable<condition> = null;
                if (true
                    && ($scope$conj = this.matchconjunction($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.loop<condition_$0>(() => this.matchcondition_$0($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.condition, conj: $scope$conj};
                }
                return $$res;
            });
    }
    public matchcondition_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<condition_$0> {
        return this.run<condition_$0>($$dpth,
            () => {
                let $scope$rest: Nullable<conjunction>;
                let $$res: Nullable<condition_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?: or )`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$rest = this.matchconjunction($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.condition_$0, rest: $scope$rest};
                }
                return $$res;
            });
    }
    public matchconjunction($$dpth: number, $$cr?: ErrorTracker): Nullable<conjunction> {
        return this.run<conjunction>($$dpth,
            () => {
                let $scope$rel: Nullable<relation>;
                let $$res: Nullable<conjunction> = null;
                if (true
                    && ($scope$rel = this.matchrelation($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.loop<conjunction_$0>(() => this.matchconjunction_$0($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.conjunction, rel: $scope$rel};
                }
                return $$res;
            });
    }
    public matchconjunction_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<conjunction_$0> {
        return this.run<conjunction_$0>($$dpth,
            () => {
                let $scope$rest: Nullable<relation>;
                let $$res: Nullable<conjunction_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?: and )`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$rest = this.matchrelation($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.conjunction_$0, rest: $scope$rest};
                }
                return $$res;
            });
    }
    public matchrelation($$dpth: number, $$cr?: ErrorTracker): Nullable<relation> {
        return this.choice<relation>([
            () => this.matchrelation_1($$dpth + 1, $$cr),
            () => this.matchrelation_2($$dpth + 1, $$cr),
        ]);
    }
    public matchrelation_1($$dpth: number, $$cr?: ErrorTracker): Nullable<relation_1> {
        return this.matchrelation_$0($$dpth + 1, $$cr);
    }
    public matchrelation_2($$dpth: number, $$cr?: ErrorTracker): Nullable<relation_2> {
        return this.matchrelation_$1($$dpth + 1, $$cr);
    }
    public matchrelation_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<relation_$0> {
        return this.run<relation_$0>($$dpth,
            () => {
                let $scope$left: Nullable<expr>;
                let $scope$rel_op: Nullable<rel>;
                let $scope$right: Nullable<expr>;
                let $$res: Nullable<relation_$0> = null;
                if (true
                    && ($scope$left = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$rel_op = this.matchrel($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchexpr($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.relation_$0, left: $scope$left, rel_op: $scope$rel_op, right: $scope$right};
                }
                return $$res;
            });
    }
    public matchrelation_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<relation_$1> {
        return this.run<relation_$1>($$dpth,
            () => {
                let $scope$cond: Nullable<condition>;
                let $$res: Nullable<relation_$1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\{)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$cond = this.matchcondition($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\})`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.relation_$1, cond: $scope$cond};
                }
                return $$res;
            });
    }
    public matchrel($$dpth: number, $$cr?: ErrorTracker): Nullable<rel> {
        return this.run<rel>($$dpth,
            () => {
                let $scope$operation: Nullable<rel_$0>;
                let $$res: Nullable<rel> = null;
                if (true
                    && ($scope$operation = this.matchrel_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.rel, operation: $scope$operation};
                }
                return $$res;
            });
    }
    public matchrel_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<rel_$0> {
        return this.choice<rel_$0>([
            () => this.matchrel_$0_1($$dpth + 1, $$cr),
            () => this.matchrel_$0_2($$dpth + 1, $$cr),
            () => this.matchrel_$0_3($$dpth + 1, $$cr),
            () => this.matchrel_$0_4($$dpth + 1, $$cr),
            () => this.matchrel_$0_5($$dpth + 1, $$cr),
            () => this.matchrel_$0_6($$dpth + 1, $$cr),
        ]);
    }
    public matchrel_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<rel_$0_1> {
        return this.regexAccept(String.raw`(?:<)`, $$dpth + 1, $$cr);
    }
    public matchrel_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<rel_$0_2> {
        return this.regexAccept(String.raw`(?:<=)`, $$dpth + 1, $$cr);
    }
    public matchrel_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<rel_$0_3> {
        return this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr);
    }
    public matchrel_$0_4($$dpth: number, $$cr?: ErrorTracker): Nullable<rel_$0_4> {
        return this.regexAccept(String.raw`(?:\!=)`, $$dpth + 1, $$cr);
    }
    public matchrel_$0_5($$dpth: number, $$cr?: ErrorTracker): Nullable<rel_$0_5> {
        return this.regexAccept(String.raw`(?:>=)`, $$dpth + 1, $$cr);
    }
    public matchrel_$0_6($$dpth: number, $$cr?: ErrorTracker): Nullable<rel_$0_6> {
        return this.regexAccept(String.raw`(?:>)`, $$dpth + 1, $$cr);
    }
    public matchexpr($$dpth: number, $$cr?: ErrorTracker): Nullable<expr> {
        return this.run<expr>($$dpth,
            () => {
                let $scope$first: Nullable<term>;
                let $$res: Nullable<expr> = null;
                if (true
                    && ($scope$first = this.matchterm($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.loop<expr_$0>(() => this.matchexpr_$0($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.expr, first: $scope$first};
                }
                return $$res;
            });
    }
    public matchexpr_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<expr_$0> {
        return this.run<expr_$0>($$dpth,
            () => {
                let $scope$op: Nullable<addop>;
                let $scope$rest: Nullable<term>;
                let $$res: Nullable<expr_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?: )`, $$dpth + 1, $$cr) !== null
                    && ($scope$op = this.matchaddop($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?: )`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$rest = this.matchterm($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.expr_$0, op: $scope$op, rest: $scope$rest};
                }
                return $$res;
            });
    }
    public matchterm($$dpth: number, $$cr?: ErrorTracker): Nullable<term> {
        return this.run<term>($$dpth,
            () => {
                let $scope$first: Nullable<factor>;
                let $$res: Nullable<term> = null;
                if (true
                    && ($scope$first = this.matchfactor($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.loop<term_$0>(() => this.matchterm_$0($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.term, first: $scope$first};
                }
                return $$res;
            });
    }
    public matchterm_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<term_$0> {
        return this.run<term_$0>($$dpth,
            () => {
                let $scope$op: Nullable<mulop>;
                let $scope$rest: Nullable<factor>;
                let $$res: Nullable<term_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?: )`, $$dpth + 1, $$cr) !== null
                    && ($scope$op = this.matchmulop($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?: )`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$rest = this.matchfactor($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.term_$0, op: $scope$op, rest: $scope$rest};
                }
                return $$res;
            });
    }
    public matchfactor($$dpth: number, $$cr?: ErrorTracker): Nullable<factor> {
        return this.choice<factor>([
            () => this.matchfactor_1($$dpth + 1, $$cr),
            () => this.matchfactor_2($$dpth + 1, $$cr),
            () => this.matchfactor_3($$dpth + 1, $$cr),
            () => this.matchfactor_4($$dpth + 1, $$cr),
            () => this.matchfactor_5($$dpth + 1, $$cr),
            () => this.matchfactor_6($$dpth + 1, $$cr),
        ]);
    }
    public matchfactor_1($$dpth: number, $$cr?: ErrorTracker): Nullable<factor_1> {
        return this.run<factor_1>($$dpth,
            () => {
                let $scope$num: Nullable<string>;
                let $$res: Nullable<factor_1> = null;
                if (true
                    && ($scope$num = this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.factor_1, num: $scope$num};
                }
                return $$res;
            });
    }
    public matchfactor_2($$dpth: number, $$cr?: ErrorTracker): Nullable<factor_2> {
        return this.matchfactor_$0($$dpth + 1, $$cr);
    }
    public matchfactor_3($$dpth: number, $$cr?: ErrorTracker): Nullable<factor_3> {
        return this.matchfactor_$1($$dpth + 1, $$cr);
    }
    public matchfactor_4($$dpth: number, $$cr?: ErrorTracker): Nullable<factor_4> {
        return this.matchfactor_$2($$dpth + 1, $$cr);
    }
    public matchfactor_5($$dpth: number, $$cr?: ErrorTracker): Nullable<factor_5> {
        return this.run<factor_5>($$dpth,
            () => {
                let $scope$sensor: Nullable<sensor>;
                let $$res: Nullable<factor_5> = null;
                if (true
                    && ($scope$sensor = this.matchsensor($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.factor_5, sensor: $scope$sensor};
                }
                return $$res;
            });
    }
    public matchfactor_6($$dpth: number, $$cr?: ErrorTracker): Nullable<factor_6> {
        return this.run<factor_6>($$dpth,
            () => {
                let $scope$memsugar: Nullable<memsugar>;
                let $$res: Nullable<factor_6> = null;
                if (true
                    && ($scope$memsugar = this.matchmemsugar($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.factor_6, memsugar: $scope$memsugar};
                }
                return $$res;
            });
    }
    public matchfactor_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<factor_$0> {
        return this.run<factor_$0>($$dpth,
            () => {
                let $scope$type: Nullable<string>;
                let $scope$index: Nullable<expr>;
                let $$res: Nullable<factor_$0> = null;
                if (true
                    && ($scope$type = this.regexAccept(String.raw`(?:mem)`, $$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$index = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.factor_$0, type: $scope$type, index: $scope$index};
                }
                return $$res;
            });
    }
    public matchfactor_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<factor_$1> {
        return this.run<factor_$1>($$dpth,
            () => {
                let $scope$expr: Nullable<expr>;
                let $$res: Nullable<factor_$1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$expr = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.factor_$1, expr: $scope$expr};
                }
                return $$res;
            });
    }
    public matchfactor_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<factor_$2> {
        return this.run<factor_$2>($$dpth,
            () => {
                let $scope$neg_expr: Nullable<expr>;
                let $$res: Nullable<factor_$2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$neg_expr = this.matchexpr($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.factor_$2, neg_expr: $scope$neg_expr};
                }
                return $$res;
            });
    }
    public matchmemsugar($$dpth: number, $$cr?: ErrorTracker): Nullable<memsugar> {
        return this.run<memsugar>($$dpth,
            () => {
                let $scope$mem_type: Nullable<memsugar_$0>;
                let $$res: Nullable<memsugar> = null;
                if (true
                    && ($scope$mem_type = this.matchmemsugar_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.memsugar, mem_type: $scope$mem_type};
                }
                return $$res;
            });
    }
    public matchmemsugar_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<memsugar_$0> {
        return this.choice<memsugar_$0>([
            () => this.matchmemsugar_$0_1($$dpth + 1, $$cr),
            () => this.matchmemsugar_$0_2($$dpth + 1, $$cr),
            () => this.matchmemsugar_$0_3($$dpth + 1, $$cr),
            () => this.matchmemsugar_$0_4($$dpth + 1, $$cr),
            () => this.matchmemsugar_$0_5($$dpth + 1, $$cr),
            () => this.matchmemsugar_$0_6($$dpth + 1, $$cr),
            () => this.matchmemsugar_$0_7($$dpth + 1, $$cr),
        ]);
    }
    public matchmemsugar_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<memsugar_$0_1> {
        return this.regexAccept(String.raw`(?:MEMSIZE)`, $$dpth + 1, $$cr);
    }
    public matchmemsugar_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<memsugar_$0_2> {
        return this.regexAccept(String.raw`(?:DEFENSE)`, $$dpth + 1, $$cr);
    }
    public matchmemsugar_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<memsugar_$0_3> {
        return this.regexAccept(String.raw`(?:OFFENSE)`, $$dpth + 1, $$cr);
    }
    public matchmemsugar_$0_4($$dpth: number, $$cr?: ErrorTracker): Nullable<memsugar_$0_4> {
        return this.regexAccept(String.raw`(?:SIZE)`, $$dpth + 1, $$cr);
    }
    public matchmemsugar_$0_5($$dpth: number, $$cr?: ErrorTracker): Nullable<memsugar_$0_5> {
        return this.regexAccept(String.raw`(?:ENERGY)`, $$dpth + 1, $$cr);
    }
    public matchmemsugar_$0_6($$dpth: number, $$cr?: ErrorTracker): Nullable<memsugar_$0_6> {
        return this.regexAccept(String.raw`(?:PASS)`, $$dpth + 1, $$cr);
    }
    public matchmemsugar_$0_7($$dpth: number, $$cr?: ErrorTracker): Nullable<memsugar_$0_7> {
        return this.regexAccept(String.raw`(?:POSTURE)`, $$dpth + 1, $$cr);
    }
    public matchsensor($$dpth: number, $$cr?: ErrorTracker): Nullable<sensor> {
        return this.choice<sensor>([
            () => this.matchsensor_1($$dpth + 1, $$cr),
            () => this.matchsensor_2($$dpth + 1, $$cr),
            () => this.matchsensor_3($$dpth + 1, $$cr),
            () => this.matchsensor_4($$dpth + 1, $$cr),
        ]);
    }
    public matchsensor_1($$dpth: number, $$cr?: ErrorTracker): Nullable<sensor_1> {
        return this.run<sensor_1>($$dpth,
            () => {
                let $scope$near: Nullable<string>;
                let $scope$expr: Nullable<expr>;
                let $$res: Nullable<sensor_1> = null;
                if (true
                    && ($scope$near = this.regexAccept(String.raw`(?:nearby )`, $$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$expr = this.matchexpr($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.sensor_1, near: $scope$near, expr: $scope$expr};
                }
                return $$res;
            });
    }
    public matchsensor_2($$dpth: number, $$cr?: ErrorTracker): Nullable<sensor_2> {
        return this.run<sensor_2>($$dpth,
            () => {
                let $scope$ahead: Nullable<string>;
                let $scope$expr: Nullable<expr>;
                let $$res: Nullable<sensor_2> = null;
                if (true
                    && ($scope$ahead = this.regexAccept(String.raw`(?:ahead )`, $$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$expr = this.matchexpr($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.sensor_2, ahead: $scope$ahead, expr: $scope$expr};
                }
                return $$res;
            });
    }
    public matchsensor_3($$dpth: number, $$cr?: ErrorTracker): Nullable<sensor_3> {
        return this.run<sensor_3>($$dpth,
            () => {
                let $scope$random: Nullable<string>;
                let $scope$expr: Nullable<expr>;
                let $$res: Nullable<sensor_3> = null;
                if (true
                    && ($scope$random = this.regexAccept(String.raw`(?:random )`, $$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$expr = this.matchexpr($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.sensor_3, random: $scope$random, expr: $scope$expr};
                }
                return $$res;
            });
    }
    public matchsensor_4($$dpth: number, $$cr?: ErrorTracker): Nullable<sensor_4> {
        return this.run<sensor_4>($$dpth,
            () => {
                let $scope$smell: Nullable<string>;
                let $$res: Nullable<sensor_4> = null;
                if (true
                    && ($scope$smell = this.regexAccept(String.raw`(?:smell)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.sensor_4, smell: $scope$smell};
                }
                return $$res;
            });
    }
    public matchaddop($$dpth: number, $$cr?: ErrorTracker): Nullable<addop> {
        return this.choice<addop>([
            () => this.matchaddop_1($$dpth + 1, $$cr),
            () => this.matchaddop_2($$dpth + 1, $$cr),
        ]);
    }
    public matchaddop_1($$dpth: number, $$cr?: ErrorTracker): Nullable<addop_1> {
        return this.regexAccept(String.raw`(?:\+)`, $$dpth + 1, $$cr);
    }
    public matchaddop_2($$dpth: number, $$cr?: ErrorTracker): Nullable<addop_2> {
        return this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr);
    }
    public matchmulop($$dpth: number, $$cr?: ErrorTracker): Nullable<mulop> {
        return this.choice<mulop>([
            () => this.matchmulop_1($$dpth + 1, $$cr),
            () => this.matchmulop_2($$dpth + 1, $$cr),
            () => this.matchmulop_3($$dpth + 1, $$cr),
        ]);
    }
    public matchmulop_1($$dpth: number, $$cr?: ErrorTracker): Nullable<mulop_1> {
        return this.regexAccept(String.raw`(?:\*)`, $$dpth + 1, $$cr);
    }
    public matchmulop_2($$dpth: number, $$cr?: ErrorTracker): Nullable<mulop_2> {
        return this.regexAccept(String.raw`(?:/)`, $$dpth + 1, $$cr);
    }
    public matchmulop_3($$dpth: number, $$cr?: ErrorTracker): Nullable<mulop_3> {
        return this.regexAccept(String.raw`(?:mod)`, $$dpth + 1, $$cr);
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.choice<_>([
            () => this.match__1($$dpth + 1, $$cr),
            () => this.match__2($$dpth + 1, $$cr),
        ]);
    }
    public match__1($$dpth: number, $$cr?: ErrorTracker): Nullable<__1> {
        return this.match__$0($$dpth + 1, $$cr);
    }
    public match__2($$dpth: number, $$cr?: ErrorTracker): Nullable<__2> {
        return this.match__$1($$dpth + 1, $$cr);
    }
    public match__$0($$dpth: number, $$cr?: ErrorTracker): Nullable<__$0> {
        return this.run<__$0>($$dpth,
            () => {
                let $$res: Nullable<__$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?://)`, $$dpth + 1, $$cr) !== null
                    && this.loop<boolean>(() => this.negate(() => this.regexAccept(String.raw`(?:\n)`, $$dpth + 1, $$cr)), true) !== null
                    && this.regexAccept(String.raw`(?:\n)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.__$0, };
                }
                return $$res;
            });
    }
    public match__$1($$dpth: number, $$cr?: ErrorTracker): Nullable<__$1> {
        return this.loop<string>(() => this.regexAccept(String.raw`(?:[ \t\r\n])`, $$dpth + 1, $$cr), true);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchprogram(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchprogram(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchprogram(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<program>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}