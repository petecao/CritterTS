{
    "lex": {
        "rules": [
           ["\\s+",                    "/* skip whitespace */"],
           ["//.*\n",                  "/* skip comments */"],
           ["[0-9]+\\b",               "return 'NUMBER';"],
           ["\\*",                     "return 'TIMES';"],
           ["\\/",                     "return 'DIV';"],
           ["mod",                     "return 'MOD';"],
           ["-",                       "return 'MINUS';"],
           ["\\+",                     "return 'PLUS';"],
           ["\\(",                     "return 'LPAREN';"],
           ["\\)",                     "return 'RPAREN';"],
           ["\\[",                     "return 'LBRACKET';"],
           ["\\]",                     "return 'RBRACKET';"],
           ["\\{",                     "return 'LBRACE';"],
           ["\\}",                     "return 'RBRACE';"],
           ["<",                       "return 'LT';"],
           ["<=",                      "return 'LEQ';"],
           ["=",                       "return 'EQ';"],
           [">=",                      "return 'GEQ';"],
           [">",                       "return 'GT';"],
           ["!=",                      "return 'NEQ';"],
           ["mem\\b",                  "return 'MEM';"],
           [";",                       "return 'SEMI';"],
           [":=",                      "return 'ASSIGN';"],
           ["-->",                     "return 'RARROW';"],
           ["MEMSIZE\\b",              "return 'MEMSIZE';"],
           ["DEFENSE\\b",              "return 'DEFENSE';"],
           ["OFFENSE\\b",              "return 'OFFENSE';"],
           ["SIZE\\b",                 "return 'SIZE';"],
           ["ENERGY\\b",               "return 'ENERGY';"],
           ["PASS\\b",                 "return 'PASS';"],
           ["POSTURE\\b",              "return 'POSTURE';"],
           ["wait\\b",                 "return 'WAIT';"],
           ["forward\\b",              "return 'FORWARD';"],
           ["backward\\b",             "return 'BACKWARD';"],
           ["left\\b",                 "return 'LEFT';"],
           ["right\\b",                "return 'RIGHT';"],
           ["eat\\b",                  "return 'EAT';"],
           ["attack\\b",               "return 'ATTACK';"],
           ["grow\\b",                 "return 'GROW';"],
           ["bud\\b",                  "return 'BUD';"],
           ["mate\\b",                 "return 'MATE';"],
           ["serve\\b",                "return 'SERVE';"],
           ["nearby\\b",               "return 'NEARBY';"],
           ["ahead\\b",                "return 'AHEAD';"],
           ["random\\b",               "return 'RANDOM';"],
           ["smell\\b",                "return 'SMELL';"],
           ["$",                       "return 'EOF';"]
        ]
    },

    "bnf": {
        "start":  [[ "program EOF",   "return $1;"]],

        "program": [[ "rules",   "$$ = {type: 'program', rules: $1};"  ]],

        "rules": [[ "rules rule",   "$$ = $1.push($2);" ],
                  [ "rule",         "$$ = [$1];" ]],

        "rule": [[ "condition RARROW command SEMI",   "$$ = {type: 'rule', condition: {type: 'condition', conjunctions: $1}, command: $3};" ]],

        "command": [[ "action",         "$$ = {type: 'command', updates: [], action: {type: 'action', class: $1}};" ],
                    [ "updates action", "$$ = {type: 'command', updates: $1, action: {type: 'action', class: $2}};" ],
                    [ "updates",        "$$ = {type: 'command', updates: $1};" ]],

        "updates": [[ "updates update",   "$$ = $1.push($2);" ],
                    [ "update",           "$$ = [$1];" ]],
  

        "update": [["memexpr ASSIGN expr", "$$ = {type: 'update', memexpr: $1, expr: $3};"]],

        "memexpr": [[ "memsugar",                   "$$ = {type: 'memsugar', val: $1};" ],
                    [ "MEM LBRACKET expr RBRACKET", "$$ = {type: 'mem', val: $3};"]],

        "action": [[ "WAIT",                         "$$ = {type: 'wait'};" ],
                   [ "FORWARD",                      "$$ = {type: 'forward'};" ],
                   [ "BACKWARD",                     "$$ = {type: 'backward'};" ],
                   [ "LEFT",                         "$$ = {type: 'left'};" ],
                   [ "RIGHT",                        "$$ = {type: 'right'};" ],
                   [ "EAT",                          "$$ = {type: 'eat'};" ],
                   [ "ATTACK",                       "$$ = {type: 'attack'};" ],
                   [ "GROW",                         "$$ = {type: 'grow'};" ],
                   [ "BUD",                          "$$ = {type: 'bud'};" ],
                   [ "MATE",                         "$$ = {type: 'mate'};" ],
                   [ "SERVE LBRACKET expr RBRACKET", "$$ = {type: 'serve', expr: $3};" ]],
                

        "condition": [[ "condition OR conjunction",   "$$ = $1.push({type: 'conjunction', relations: $2});" ],
                      [ "conjunction",                "$$ = [{type: 'conjunction', relations: $1}];" ]],

        "conjunction": [[ "conjunction AND relation",   "$$ = $1.push($2);" ],
                        [ "relation",                  "$$ = [$1];" ]],

        "relation": [[ "expr rel expr",           "$$ = {type: 'relation', class: 'rel', relop: $2, left: $1, right: $2};"],
                     [ "LBRACE condition RBRACE", "$$ = {type: 'relation', class: 'condition', condition: {type: 'condition', conjunctions: $2}};"]],

        "expr": [[ "term addop expr", "$$ = {type: expr, class: $2, left: $1, right: $3};" ],
                 [ "term",            "$$ = {type: expr, class: 'term', expr: $1};" ]],

        "term": [[ "factor mulop term", "$$ = {type: term, class: $2, left: $1, right: $3};" ],
                 [ "factor",            "$$ = {type: term, class: 'factor', expr: $1};" ]],

        "factor": [[ "memexpr",            "$$ = {type: 'factor', class: 'memexpr', expr: $1};"],
                   [ "LPAREN expr RPAREN", "$$ = {type: 'factor', class: 'expr', expr: $2};"],
                   [ "MINUS expr",         "$$ = {type: 'factor', class: 'negexpr', expr: $2};"],
                   [ "sensor",             "$$ = {type: 'factor', class: 'sensor', expr: $1};"],
                   [ "NUMBER",             "$$ = {type: 'factor', class: 'number', expr: Number(yytext)};"]],

        "sensor": [[ "NEARBY LBRACKET expr RBRACKET", "$$ = {type: 'nearby', expr: $3};" ],
                   [ "AHEAD LBRACKET expr RBRACKET",  "$$ = {type: 'ahead', expr: $3};" ],
                   [ "RANDOM LBRACKET expr RBRACKET", "$$ = {type: 'random', expr: $3};" ],
                   [ "SMELL",                         "$$ = {type: 'smell'};" ]],

        "memsugar": [[ "MEMSIZE", "$$ = 'MEMSIZE';" ],
                     [ "DEFENSE", "$$ = 'DEFENSE';" ],
                     [ "OFFENSE", "$$ = 'OFFENSE';" ],
                     [ "SIZE",    "$$ = 'SIZE';" ],
                     [ "ENERGY",  "$$ = 'ENERGY';" ],
                     [ "PASS",    "$$ = 'PASS';" ],
                     [ "POSTURE", "$$ = 'POSTURE';" ]],

        "rel": [[ "LT",    "$$ = 'LT';" ],
                [ "LEQ",   "$$ = 'LEQ';" ],
                [ "EQ",    "$$ = 'EQ';" ],
                [ "GEQ",   "$$ = 'GEQ';" ],
                [ "GT",    "$$ = 'GT';"],
                [ "NEQ",   "$$ = 'NEQ';" ]],

        "addop": [[ "ADD", "$$ = 'ADD';" ],
                  [ "SUB", "$$ = 'SUB';" ]],

        "mulop": [[ "TIMES", "$$ = 'TIMES';" ],
                  [ "DIV",   "$$ = 'DIV';" ],
                  [ "MOD",   "$$ = 'MOD';" ]]
    }
}